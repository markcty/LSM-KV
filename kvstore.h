#ifndef LSM_KV__KVSTORE_H_#define LSM_KV__KVSTORE_H_#include <string>#include <queue>#include <unistd.h>#include <algorithm>#include "kvstore_api.h"#include "SkipList.h"#include "SSTable.h"using namespace std;class KVStore : public KVStoreAPI { private:  string storagePath;  uint64_t timeStamp;  SkipList memTable;  // if memTable is large enough to be converted to a SSTable  static inline bool overflow(unsigned long size, unsigned long length);  // compaction for level0//  void compaction0();  void compaction(int level);  // utils  // return 2^n  static int pow2(int n); public:  // some constants  static const unsigned long BloomFilterSize = 10240; // 10KB  static const unsigned long SSTableSize = 2097152;   // 2MB  static const unsigned long HeaderSize = 32; // 32B  explicit KVStore(const string &_storagePath);  ~KVStore();  void put(uint64_t key, const string &value) override;  string get(uint64_t key) override;  bool del(uint64_t key) override;  void reset() override;};#endif //LSM_KV__KVSTORE_H_